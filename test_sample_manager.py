"""
測試樣本資料管理器
提供安全、豐富的樣本資料用於測試模式，避免對外部 API 的真實請求
"""

import random
import hashlib
from typing import Dict, Tuple, Optional
import datetime


class TestSampleManager:
    """管理測試模式下使用的樣本資料"""
    
    def __init__(self):
        # 預定義的樣本資料集
        self.samples = {
            "tech": {
                "title": "ChatGPT 與 AI 程式設計革命：開發者的新時代",
                "description": "深入探討 ChatGPT 如何改變軟體開發流程，從程式碼生成到除錯，AI 如何成為程式設計師的最佳夥伴",
                "duration": 1250,  # 20分50秒
                "transcript": """
大家好，歡迎來到今天的技術分享。今天我們要談論的是 ChatGPT 和人工智能如何正在徹底改變程式設計的世界。

首先，讓我們回顧一下傳統的程式設計流程。過去，開發者需要花費大量時間搜尋文檔、查找解決方案、除錯程式碼。這個過程往往耗時且效率低下。

但現在，隨著 ChatGPT 的出現，一切都改變了。這個強大的 AI 工具不僅可以幫助我們生成程式碼，還能協助我們理解複雜的程式設計概念。

讓我給大家展示一個實際的例子。假設我們要實現一個 Python 函數來計算斐波那契數列。過去我們可能需要翻閱資料或搜尋範例。現在，我們只需要向 ChatGPT 描述我們的需求，它就能立即提供一個完整的解決方案。

但這只是冰山一角。ChatGPT 還能幫助我們：
1. 程式碼審查和優化建議
2. 除錯和錯誤分析
3. 解釋複雜的程式設計概念
4. 重構現有程式碼

當然，我們也需要注意一些潛在的風險。過度依賴 AI 可能會影響我們獨立解決問題的能力。因此，我建議將 ChatGPT 視為一個強大的輔助工具，而不是完全的替代品。

總結來說，ChatGPT 正在開啟程式設計的新時代。它讓編程變得更加高效、有趣，同時也降低了入門門檻。對於經驗豐富的開發者來說，它是一個強大的生產力工具；對於初學者來說，它是一個耐心的導師。

感謝大家的收看，希望今天的分享對你們有所幫助。如果你有任何問題，歡迎在評論區留言討論。我們下次見！
                """.strip(),
                "summary": """
# ChatGPT 與 AI 程式設計革命：開發者的新時代

## 📝 內容摘要

本影片深入探討 ChatGPT 如何改變現代軟體開發流程，從傳統的手動查找文檔模式轉向 AI 輔助的高效開發方式。

## 🎯 核心要點

### 傳統程式設計的挑戰
- 耗時的文檔搜尋和資料查找
- 複雜的除錯過程
- 低效的學習曲線

### ChatGPT 帶來的革命性改變
1. **程式碼生成**：快速產生符合需求的程式碼
2. **程式碼審查**：提供優化建議和最佳實踐
3. **除錯協助**：分析錯誤並提供解決方案
4. **概念解釋**：深入淺出地說明複雜概念
5. **程式碼重構**：改善現有程式碼的結構和效能

### 實際應用示例
- 斐波那契數列的 Python 實現
- 從需求描述到完整解決方案的快速轉換

### 使用建議與注意事項
- **平衡使用**：將 ChatGPT 視為輔助工具而非完全替代品
- **保持學習**：避免過度依賴影響獨立思考能力
- **審慎驗證**：仍需對 AI 生成的程式碼進行驗證

## 💭 個人觀點

ChatGPT 正在重新定義程式設計師的工作方式，它不僅提高了開發效率，也降低了程式設計的入門門檻。對於資深開發者，它是強大的生產力倍增器；對於初學者，它是耐心的智能導師。

## 🎯 適用對象

- 軟體開發者（各階段）
- 程式設計學習者
- 對 AI 輔助開發感興趣的技術人員
- 想要提升開發效率的團隊

## 📊 推薦指數
⭐⭐⭐⭐⭐ (5/5)

這是一個非常實用的技術分享，內容既有理論深度又有實際應用價值，強烈推薦給所有程式設計相關從業者觀看。
                """.strip()
            },
            
            "news": {
                "title": "2024 年台灣科技產業展望：AI 浪潮下的機會與挑戰",
                "description": "分析台灣科技產業在人工智能時代的發展機會，以及半導體、軟體業面臨的轉型挑戰",
                "duration": 890,  # 14分50秒
                "transcript": """
各位觀眾大家好，我是主播王小明。今天的新聞焦點要帶大家關注台灣科技產業在 2024 年的發展前景。

隨著全球人工智能浪潮的興起，台灣科技產業正面臨前所未有的機會與挑戰。根據工研院最新發布的報告，2024 年台灣 AI 相關產業產值預計將達到新台幣 3000 億元，相比去年成長 35%。

首先來看半導體產業。台積電作為全球晶片代工龍頭，在 AI 晶片製造領域持續領先。公司最新的 3 奈米製程技術已經成功量產，主要客戶包括蘋果、NVIDIA 等國際大廠。台積電董事長劉德音表示，AI 運算晶片的需求將是推動公司未來成長的主要動力。

聯發科在 AI 處理器設計方面也有重大突破。其最新發布的天璣 9300 處理器整合了先進的 AI 運算單元，在手機 AI 應用方面表現優異。預計將在明年第一季度開始大量出貨。

軟體產業方面，台灣多家新創公司正積極投入 AI 應用開發。包括語音識別、影像處理、自然語言處理等領域都有不錯的進展。政府也宣布將在明年編列 200 億預算支持 AI 產業發展。

然而，產業發展也面臨一些挑戰。首先是人才短缺問題。根據調查，台灣 AI 相關人才缺口約 3 萬人。其次是國際競爭加劇，中國大陸和美國在 AI 領域的投資規模都非常龐大。

專家分析認為，台灣應該善用既有的半導體優勢，結合軟硬整合的能力，在 AI 應用的垂直領域尋找突破機會。同時，政府和產業界需要加強產學合作，培養更多 AI 專業人才。

展望未來，台灣科技產業在全球 AI 供應鏈中的地位將更加重要。如何在機會與挑戰並存的環境中找到自己的定位，將是決定台灣科技產業未來競爭力的關鍵。

以上就是今天的科技新聞報導，感謝您的收看。
                """.strip(),
                "summary": """
# 2024 年台灣科技產業展望：AI 浪潮下的機會與挑戰

## 📺 新聞摘要

本新聞報導深入分析台灣科技產業在人工智能時代的發展現況，涵蓋半導體、軟體產業的機會與挑戰。

## 📊 關鍵數據

### 產業成長數據
- **AI 產業產值**：預計 2024 年達 3000 億新台幣
- **年成長率**：35% (相比前年)
- **人才缺口**：約 3 萬人
- **政府預算**：200 億支持 AI 產業發展

## 🏭 產業現況分析

### 半導體產業優勢
**台積電 (TSMC)**
- 3 奈米製程技術成功量產
- 主要客戶：蘋果、NVIDIA 等國際大廠
- AI 運算晶片成為未來成長動力

**聯發科 (MediaTek)**
- 天璣 9300 處理器整合先進 AI 運算單元
- 手機 AI 應用表現優異
- 預計明年 Q1 大量出貨

### 軟體產業發展
- 多家新創投入 AI 應用開發
- 重點領域：語音識別、影像處理、自然語言處理
- 政府政策大力支持

## ⚠️ 面臨挑戰

### 人才短缺
- AI 專業人才缺口嚴重（3 萬人）
- 需要加強產學合作培育人才

### 國際競爭
- 中國大陸與美國 AI 投資規模龐大
- 台灣需要找到差異化競爭優勢

## 🎯 專家建議

### 發展策略
1. **善用半導體優勢**：結合既有製造能力
2. **軟硬整合**：發揮台灣產業鏈完整性
3. **垂直應用**：在特定領域尋找突破機會
4. **產學合作**：培養更多專業人才

### 未來定位
- 在全球 AI 供應鏈中佔據重要地位
- 發揮台灣在硬體製造的優勢
- 結合軟體創新能力

## 💭 分析觀點

台灣科技產業正處於轉型的關鍵時刻。雖然面臨人才短缺和國際競爭的挑戰，但憑藉強大的半導體製造能力和逐漸成熟的軟體產業，台灣有機會在 AI 時代中找到自己的獨特定位。

## 🎯 關注族群

- 科技產業從業者
- 投資人和分析師
- 政策制定者
- 對台灣科技發展感興趣的民眾

## 📊 重要性評級
⭐⭐⭐⭐⭐ (5/5)

這是了解台灣科技產業發展趨勢的重要資訊，對於相關從業者和關心台灣經濟發展的民眾都具有重要參考價值。
                """.strip()
            },
            
            "podcast": {
                "title": "創業路上的心理學：如何克服創業焦慮與自我懷疑",
                "description": "專訪心理諮商師探討創業者常見的心理挑戰，分享實用的心理調適技巧和成功心態建立方法",
                "duration": 2140,  # 35分40秒
                "transcript": """
歡迎收聽「創業心聲」播客節目，我是主持人 Lisa。今天我們很榮幸邀請到知名心理諮商師陳博士，來跟我們談談創業路上的心理挑戰。

Lisa：陳博士，您好！首先想請您分享一下，您在諮商工作中觀察到創業者最常遇到的心理問題是什麼？

陳博士：您好 Lisa，很高興來到您的節目。根據我的觀察，創業者最常面臨的心理挑戰主要有三個：第一是焦慮症狀，第二是自我懷疑，第三是孤獨感。

Lisa：能具體說明一下這些問題是如何產生的嗎？

陳博士：當然。首先是焦慮症狀。創業本身就充滿不確定性，從資金到市場反應，每一個環節都可能出現變數。這種持續的不確定性會讓大腦持續處於警戒狀態，長期下來就容易產生焦慮症狀。

自我懷疑則通常來自於對失敗的恐懼。很多創業者會不斷質疑自己的決策、能力，甚至是整個創業方向。特別是當遇到挫折時，這種自我懷疑會更加強烈。

至於孤獨感，這是因為創業者往往需要承擔最終的決策責任。身邊的人可能不理解創業的壓力和挑戰，這讓創業者感到孤立無援。

Lisa：這些問題聽起來確實很嚴重。那麼有什麼方法可以幫助創業者應對這些心理挑戰呢？

陳博士：我建議創業者可以從幾個方面來調適：

首先是建立正確的期待。很多創業者對成功有過度理想化的期待，認為一切都應該順利進行。但實際上，挫折和失敗是創業過程的正常組成部分。接受這個事實可以減少很多不必要的焦慮。

其次是建立支持網絡。找到同樣在創業路上的夥伴，或者加入創業者社群，定期交流經驗和感受。這可以大大減少孤獨感。

第三是學習壓力管理技巧。比如冥想、運動、規律作息等，這些都有助於緩解焦慮和壓力。

最後是尋求專業幫助。如果心理壓力已經影響到日常生活和工作效率，建議及時尋求心理諮商師的協助。

Lisa：您提到的這些方法都很實用。能否分享一個具體的成功案例？

陳博士：我記得有一位做電商的創業者，他在創業初期每天都睡不好，總是擔心各種可能出現的問題。經過諮商後，我們幫他建立了一套問題分類系統：把問題分為「可控」和「不可控」兩類。對於可控的問題，制定具體的解決方案；對於不可控的問題，學習接受和放下。

同時，我們也幫他建立了每日的放鬆練習，包括 10 分鐘的深呼吸冥想。幾個月後，他的睡眠品質明顯改善，工作效率也提升了。

Lisa：這個案例很有啟發性。最後想請您給正在創業或準備創業的聽眾一些建議。

陳博士：我想說的是，照顧好自己的心理健康和照顧事業同樣重要。創業是一場馬拉松，不是短跑，保持身心健康才能走得更遠。記住，尋求幫助不是軟弱的表現，而是智慧的選擇。

Lisa：非常感謝陳博士今天的分享，我相信對我們的聽眾很有幫助。今天的節目就到這裡，我們下次見！

陳博士：謝謝 Lisa，也謝謝所有聽眾。祝大家創業路上身心健康，事業順利！
                """.strip(),
                "summary": """
# 創業路上的心理學：如何克服創業焦慮與自我懷疑

## 🎙️ 播客摘要

本集播客邀請心理諮商師陳博士深度探討創業者面臨的心理挑戰，分享專業的心理調適建議和實用技巧。

## 🧠 創業者三大心理挑戰

### 1. 焦慮症狀
- **成因**：創業充滿不確定性，大腦持續處於警戒狀態
- **表現**：持續擔憂、睡眠品質差、注意力不集中
- **影響**：影響決策能力和工作效率

### 2. 自我懷疑
- **成因**：對失敗的恐懼，質疑自己的能力和決策
- **表現**：不斷否定自己、猶豫不決、缺乏自信
- **影響**：延誤重要決策，錯失商機

### 3. 孤獨感
- **成因**：承擔最終責任，身邊人難以理解創業壓力
- **表現**：感到孤立無援、缺乏情感支持
- **影響**：增加心理壓力，影響人際關係

## 💡 專業應對策略

### 1. 建立正確期待
- **觀念轉換**：接受挫折和失敗是創業的正常組成部分
- **心態調整**：從完美主義轉向成長心態
- **減少焦慮**：降低對成功的過度理想化期待

### 2. 建立支持網絡
- **尋找同路人**：加入創業者社群或聯盟
- **定期交流**：分享經驗和感受，獲得情感支持
- **減少孤獨感**：建立理解和支持的人際關係

### 3. 學習壓力管理
- **冥想練習**：每日 10 分鐘深呼吸冥想
- **規律運動**：維持身體健康，釋放壓力
- **作息調整**：保持規律睡眠，提升復原力

### 4. 尋求專業幫助
- **及時求助**：當壓力影響日常生活時
- **專業諮商**：獲得個人化的心理支持
- **智慧選擇**：尋求幫助是智慧而非軟弱

## 📋 實用工具：問題分類系統

### 可控問題
- 制定具體解決方案
- 分配時間和資源處理
- 定期檢視執行進度

### 不可控問題
- 學習接受和放下
- 專注於可控範圍內的行動
- 避免過度擔憂

## 🏆 成功案例分享

**電商創業者的轉變**
- **問題**：每日失眠、過度擔憂
- **方法**：問題分類系統 + 每日冥想
- **結果**：睡眠品質改善、工作效率提升

## 🎯 核心金句

> "創業是一場馬拉松，不是短跑，保持身心健康才能走得更遠。"

> "照顧好自己的心理健康和照顧事業同樣重要。"

> "尋求幫助不是軟弱的表現，而是智慧的選擇。"

## 💭 主要啟發

創業者的心理健康往往被忽視，但它是創業成功的重要基石。透過正確的心態調整、支持網絡建立和專業工具應用，創業者可以更好地應對心理挑戰，在創業路上走得更穩健。

## 🎯 適用對象

- 正在創業的創業者
- 準備創業的人士
- 關心創業者心理健康的家人朋友
- 對創業心理學感興趣的聽眾
- 心理健康相關從業者

## 📊 推薦指數
⭐⭐⭐⭐⭐ (5/5)

這是一集非常實用且深度的播客內容，不僅提供了專業的心理學觀點，也有具體可執行的建議，強烈推薦給所有創業路上的朋友。
                """.strip()
            },
            
            "education": {
                "title": "Python 資料科學入門：Pandas 基礎操作完整教學",
                "description": "從零開始學習 Pandas 庫，掌握資料讀取、清理、分析的核心技能，適合初學者的完整教學",
                "duration": 1680,  # 28分鐘
                "transcript": """
大家好，我是阿明老師，歡迎來到 Python 資料科學系列課程。今天我們要學習的是 Pandas 這個強大的資料處理庫。

Pandas 是 Python 資料科學生態系中最重要的工具之一。它提供了強大的資料結構和資料分析工具，讓我們能夠輕鬆地處理結構化資料。

首先，讓我們安裝 Pandas。打開你的終端機或命令提示字元，輸入：pip install pandas

安裝完成後，我們來匯入 Pandas：
import pandas as pd
import numpy as np

Pandas 的兩個核心資料結構是 Series 和 DataFrame。

Series 是一維的標籤化陣列，可以儲存任何類型的資料。讓我們建立一個簡單的 Series：
data = [1, 3, 5, 7, 9]
s = pd.Series(data)
print(s)

DataFrame 是二維的標籤化資料結構，就像是 Excel 的工作表或 SQL 的資料表。讓我們建立一個 DataFrame：
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'Diana'],
    'Age': [25, 30, 35, 28],
    'City': ['台北', '台中', '高雄', '台南']
}
df = pd.DataFrame(data)
print(df)

現在讓我們學習如何讀取外部資料。Pandas 支援多種檔案格式：
# 讀取 CSV 檔案
df = pd.read_csv('data.csv')

# 讀取 Excel 檔案
df = pd.read_excel('data.xlsx')

# 讀取 JSON 檔案
df = pd.read_json('data.json')

接下來是資料探索的基本操作：
# 查看前幾行
print(df.head())

# 查看資料資訊
print(df.info())

# 查看統計摘要
print(df.describe())

# 查看欄位名稱
print(df.columns)

# 查看資料形狀
print(df.shape)

資料選取是非常重要的技能：
# 選取單一欄位
ages = df['Age']

# 選取多個欄位
subset = df[['Name', 'Age']]

# 根據條件選取
adults = df[df['Age'] >= 30]

# 使用 loc 和 iloc
first_row = df.loc[0]  # 按標籤選取
first_row = df.iloc[0]  # 按位置選取

資料清理是資料科學的重要步驟：
# 檢查缺失值
print(df.isnull().sum())

# 填補缺失值
df.fillna(0, inplace=True)  # 用 0 填補
df.fillna(df.mean(), inplace=True)  # 用平均值填補

# 刪除缺失值
df.dropna(inplace=True)

# 刪除重複值
df.drop_duplicates(inplace=True)

讓我們學習一些基本的資料操作：
# 新增欄位
df['Salary'] = [50000, 60000, 70000, 55000]

# 修改欄位值
df['Age'] = df['Age'] + 1

# 刪除欄位
df.drop('City', axis=1, inplace=True)

# 排序
df_sorted = df.sort_values('Age', ascending=False)

分組和聚合操作：
# 按城市分組計算平均年齡
grouped = df.groupby('City')['Age'].mean()

# 多重聚合
agg_result = df.groupby('City').agg({
    'Age': ['mean', 'max', 'min'],
    'Salary': 'sum'
})

最後，讓我們保存處理後的資料：
# 保存為 CSV
df.to_csv('processed_data.csv', index=False)

# 保存為 Excel
df.to_excel('processed_data.xlsx', index=False)

今天我們學習了 Pandas 的基礎操作，包括資料讀取、探索、清理和基本分析。這些技能是資料科學的基礎，希望大家多加練習。

下一堂課我們將學習更進階的 Pandas 功能，包括資料合併、透視表和時間序列分析。感謝大家的收看，我們下次見！

記住，熟練掌握 Pandas 需要大量的練習。建議大家找一些真實的資料集來練習今天學到的技能。
                """.strip(),
                "summary": """
# Python 資料科學入門：Pandas 基礎操作完整教學

## 📚 課程摘要

這是一堂完整的 Pandas 基礎教學課程，由阿明老師主講，涵蓋從安裝到基本操作的所有核心概念，適合 Python 資料科學初學者。

## 🎯 學習目標

學會使用 Pandas 進行基本的資料處理操作，包括讀取、探索、清理和分析結構化資料。

## 📖 課程大綱

### 1. Pandas 簡介與安裝
- **定義**：Python 資料科學生態系中的核心工具
- **功能**：提供強大的資料結構和分析工具
- **安裝**：`pip install pandas`
- **匯入**：`import pandas as pd`

### 2. 核心資料結構

#### Series（一維資料結構）
```python
data = [1, 3, 5, 7, 9]
s = pd.Series(data)
```

#### DataFrame（二維資料結構）
```python
data = {
    'Name': ['Alice', 'Bob', 'Charlie', 'Diana'],
    'Age': [25, 30, 35, 28],
    'City': ['台北', '台中', '高雄', '台南']
}
df = pd.DataFrame(data)
```

### 3. 資料讀取
支援多種檔案格式：
- **CSV**：`pd.read_csv('data.csv')`
- **Excel**：`pd.read_excel('data.xlsx')`
- **JSON**：`pd.read_json('data.json')`

### 4. 資料探索基本操作
- `df.head()`：查看前幾行
- `df.info()`：查看資料資訊
- `df.describe()`：統計摘要
- `df.columns`：欄位名稱
- `df.shape`：資料形狀

### 5. 資料選取技巧
- **單一欄位**：`df['Age']`
- **多個欄位**：`df[['Name', 'Age']]`
- **條件選取**：`df[df['Age'] >= 30]`
- **標籤選取**：`df.loc[0]`
- **位置選取**：`df.iloc[0]`

### 6. 資料清理操作
- **檢查缺失值**：`df.isnull().sum()`
- **填補缺失值**：`df.fillna(0)` 或 `df.fillna(df.mean())`
- **刪除缺失值**：`df.dropna()`
- **去除重複值**：`df.drop_duplicates()`

### 7. 基本資料操作
- **新增欄位**：`df['Salary'] = [...]`
- **修改欄位**：`df['Age'] = df['Age'] + 1`
- **刪除欄位**：`df.drop('City', axis=1)`
- **排序**：`df.sort_values('Age')`

### 8. 分組與聚合
- **簡單分組**：`df.groupby('City')['Age'].mean()`
- **多重聚合**：
```python
df.groupby('City').agg({
    'Age': ['mean', 'max', 'min'],
    'Salary': 'sum'
})
```

### 9. 資料保存
- **CSV 格式**：`df.to_csv('data.csv', index=False)`
- **Excel 格式**：`df.to_excel('data.xlsx', index=False)`

## 💡 重要概念

### 資料科學工作流程
1. **資料讀取**：從各種來源載入資料
2. **資料探索**：了解資料的基本特徵
3. **資料清理**：處理缺失值和異常值
4. **資料分析**：進行統計分析和轉換
5. **結果保存**：將處理後的資料存儲

### 最佳實踐建議
- **多加練習**：使用真實資料集進行操作
- **循序漸進**：從簡單操作開始，逐步學習複雜功能
- **查閱文檔**：善用 Pandas 官方文檔和社群資源

## 🎯 適用對象

- Python 程式設計初學者
- 想要進入資料科學領域的學習者
- 需要處理結構化資料的工作者
- 對資料分析感興趣的學生和專業人士

## 📈 後續學習方向

下一堂課將涵蓋：
- 資料合併 (merge, join)
- 透視表 (pivot table)
- 時間序列分析
- 更進階的資料操作技巧

## 💪 實作建議

1. **找真實資料集**：到 Kaggle 或政府開放資料平台下載資料
2. **重複練習**：每個操作都要親自動手做一遍
3. **解決實際問題**：嘗試用 Pandas 解決工作或學習中的資料問題
4. **建立筆記**：記錄常用的程式碼片段

## 📊 推薦指數
⭐⭐⭐⭐⭐ (5/5)

這是一堂結構完整、內容實用的 Pandas 入門課程，適合零基礎學習者，教學節奏適中，例子清晰易懂，強烈推薦給想要學習資料科學的朋友。
                """.strip()
            },
            
            "lifestyle": {
                "title": "極簡生活的藝術：如何在繁忙世界中找到內心平靜",
                "description": "分享極簡生活的實踐方法，探討如何透過減少物質慾望和生活簡化來獲得更多幸福感和內心平靜",
                "duration": 1420,  # 23分40秒
                "transcript": """
大家好，我是 Emma，歡迎來到今天的分享。今天我想跟大家談談極簡生活這個話題。

什麼是極簡生活？很多人對極簡生活有誤解，認為就是要住在空蕩蕩的房子裡，擁有越少東西越好。但實際上，極簡生活是一種生活哲學，核心是「只保留真正重要的東西」。

我開始極簡生活是三年前的事。當時我住在一個塞滿各種物品的小公寓裡，每天被各種瑣事困擾，感覺生活失去了方向。有一天我突然意識到，我被這些物品綁架了，而不是它們為我服務。

極簡生活的第一步是學會斷捨離。但這不只是丟掉東西那麼簡單，而是要思考每樣物品對你的意義。我會問自己三個問題：
第一，這個東西我真的需要嗎？
第二，它能為我的生活帶來價值嗎？
第三，如果失去它，我會感到困擾嗎？

只有三個答案都是肯定的，我才會保留這個物品。

整理衣櫃是一個很好的開始。我發現我有很多從來不穿的衣服，它們只是佔據空間。現在我的衣櫃裡只有 30 件衣服，但每一件都是我真心喜歡，而且可以互相搭配的。

極簡生活不只是關於物品，也關於時間和精力的管理。我學會了說「不」。以前我總是答應各種邀請和請求，結果讓自己疲憊不堪。現在我會優先考慮那些真正重要的事情。

在數位生活方面，我也實行了極簡原則。我取消了大部分不必要的 App 通知，只保留真正重要的聯絡人的即時訊息。我每天只在固定時間查看社群媒體，避免無意識的滑手機。

極簡生活讓我發現了很多意想不到的好處。首先是節省了大量時間。以前我花很多時間整理和尋找東西，現在所有東西都有固定的位置，生活變得更有序。

其次是減少了決策疲勞。當選擇變少時，做決定變得更容易。比如我的早餐選項只有三種，每天早上不需要思考太久就能決定。

最重要的是，我找到了內心的平靜。當外在環境變得簡單時，內心也會變得更清晰。我有更多時間思考什麼對我真正重要，也有更多精力投入到我熱愛的事情上。

當然，極簡生活也面臨一些挑戰。最大的挑戰是來自周圍人的不理解。有些朋友覺得我過得太「單調」，也有家人擔心我是不是遇到了經濟困難。

另一個挑戰是找到適合自己的極簡程度。極簡不是一個固定的標準，每個人的需求都不同。我花了很長時間才找到適合自己的平衡點。

對於想要嘗試極簡生活的朋友，我有幾個建議：

首先，從小處開始。不要試圖一次性改變所有東西，可以從整理一個抽屜或清理電腦桌面開始。

其次，專注於質量而不是數量。買東西時問問自己：「我真的需要這個嗎？」「這個東西能用多久？」「它能為我的生活帶來長期價值嗎？」

第三，建立新的習慣。比如每天晚上花 10 分鐘整理桌面，或者每週末花一小時檢視和整理個人物品。

最後，要有耐心。極簡生活是一個持續的過程，不是一蹴而就的。重要的是找到屬於自己的生活節奏。

極簡生活教會了我什麼是真正的富足。富足不是擁有更多，而是需要更少。當我們減少對外在物質的依賴時，反而能更深刻地體會生活的美好。

現在我每天早上醒來，看到整潔的房間，心情就會很好。我有更多時間閱讀、運動、和朋友聊天，生活品質反而提升了。

如果你也感到被物品和忙碌的生活所困擾，不妨試試極簡生活。記住，極簡的目標不是擁有最少，而是擁有最適合的。

感謝大家的聆聽，希望今天的分享對你們有所啟發。如果你對極簡生活有任何問題，歡迎在評論區留言討論。我們下次見！
                """.strip(),
                "summary": """
# 極簡生活的藝術：如何在繁忙世界中找到內心平靜

## 🌸 內容摘要

Emma 分享她三年來的極簡生活實踐經驗，探討如何透過簡化物質生活和優化時間管理來獲得更高的生活品質和內心平靜。

## 🎯 核心理念

### 極簡生活的真正定義
> "極簡生活不是擁有最少，而是只保留真正重要的東西"

- **誤解澄清**：不是住空房子或擁有極少物品
- **核心概念**：專注於對生活有真正價值的事物
- **生活哲學**：質量重於數量的生活態度

## 🔄 極簡轉變的起點

### 個人覺醒時刻
- **背景**：住在塞滿物品的小公寓，被瑣事困擾
- **覺悟**：意識到被物品綁架，而非物品為我服務
- **決定**：開始三年的極簡生活實踐之路

## 📋 斷捨離三問法

### 物品評估標準
1. **需要性**：這個東西我真的需要嗎？
2. **價值性**：它能為我的生活帶來價值嗎？
3. **重要性**：如果失去它，我會感到困擾嗎？

**決策原則**：只有三個答案都是肯定的，才保留該物品

## 👔 實際應用案例

### 衣櫃極簡化
- **前後對比**：從大量未穿衣物到 30 件精選衣物
- **選擇標準**：每件都真心喜歡且可互相搭配
- **效果**：減少選擇困擾，提升穿搭效率

### 時間與精力管理
- **學會說不**：優先考慮真正重要的事情
- **避免過度承諾**：防止疲憊不堪的生活狀態

### 數位極簡實踐
- **通知管理**：取消大部分不必要的 App 通知
- **聯絡人精簡**：只保留真正重要的即時訊息
- **社群媒體**：固定時間查看，避免無意識滑手機

## ✨ 極簡生活的益處

### 1. 時間節省
- **前**：花大量時間整理和尋找物品
- **後**：所有東西都有固定位置，生活更有序

### 2. 減少決策疲勞
- **選擇簡化**：減少日常選擇，如早餐只有三種選項
- **決策效率**：更快做出決定，減少心理負擔

### 3. 內心平靜 ⭐
- **外在簡單**：環境整潔有序
- **內心清晰**：更多時間思考重要事情
- **精力集中**：投入到真正熱愛的事情上

## ⚠️ 面臨的挑戰

### 社會壓力
- **他人不解**：朋友認為生活太「單調」
- **家人擔憂**：誤以為遇到經濟困難
- **社會期待**：與消費主義文化的衝突

### 個人探索
- **平衡點尋找**：找到適合自己的極簡程度
- **標準差異**：每個人的需求和適合程度不同
- **時間投入**：需要長期摸索和調整

## 🎯 實用建議

### 1. 循序漸進原則
- **小處開始**：整理一個抽屜或清理電腦桌面
- **避免極端**：不要試圖一次性改變所有東西
- **穩定推進**：建立可持續的改變節奏

### 2. 購物三問法
- "我真的需要這個嗎？"
- "這個東西能用多久？"
- "它能為我的生活帶來長期價值嗎？"

### 3. 建立新習慣
- **每日整理**：晚上花 10 分鐘整理桌面
- **週末檢視**：花一小時檢視和整理個人物品
- **定期評估**：持續檢討和調整極簡標準

### 4. 保持耐心
- **持續過程**：極簡生活是長期實踐，非一蹴而就
- **個人節奏**：找到屬於自己的生活節奏
- **心態調整**：專注於過程而非完美結果

## 💎 深度反思

### 富足的重新定義
> "富足不是擁有更多，而是需要更少"

- **價值觀轉變**：從量的追求到質的體驗
- **依賴減少**：減少對外在物質的依賴
- **體驗深化**：更深刻地體會生活的美好

### 生活品質提升
- **環境改善**：整潔的生活空間帶來好心情
- **時間自由**：更多時間閱讀、運動、社交
- **壓力減輕**：減少物品管理的心理負擔

## 🎯 適用對象

- 感到被物品和忙碌生活困擾的人
- 想要改善生活品質和內心狀態的人
- 對極簡生活哲學感興趣的實踐者
- 希望減少消費主義影響的人
- 追求更有意義生活方式的人

## 💭 個人感悟

極簡生活不是剝奪，而是釋放。當我們釋放對不必要事物的執著時，反而獲得了更多的自由和快樂。這是一個關於選擇和優先級的生活藝術。

## 📊 推薦指數
⭐⭐⭐⭐⭐ (5/5)

這是一個非常實用且具有啟發性的極簡生活分享，Emma 的經驗分享真誠而具體，提供了可執行的建議和深刻的生活哲學思考，強烈推薦給想要改善生活品質的朋友。
                """.strip()
            }
        }
    
    def get_sample_by_type(self, sample_type: str) -> Optional[Dict]:
        """根據類型獲取樣本資料"""
        return self.samples.get(sample_type)
    
    def get_sample_by_url(self, url: str) -> Dict:
        """根據 URL 智慧選擇適當的樣本資料"""
        # 從 URL 中提取類型提示
        url_lower = url.lower()
        
        # 根據 URL 關鍵字選擇樣本類型 (按優先級排序)
        if any(keyword in url_lower for keyword in ['news', 'report', '新聞', 'taiwan', 'update', 'industry']):
            sample_type = 'news'
        elif any(keyword in url_lower for keyword in ['podcast', 'interview', '訪談', 'talk', 'startup', 'entrepreneur']):
            sample_type = 'podcast'
        elif any(keyword in url_lower for keyword in ['tutorial', 'lesson', 'learn', 'python', 'pandas', 'course', 'education']):
            sample_type = 'education'
        elif any(keyword in url_lower for keyword in ['lifestyle', 'life', '生活', 'minimal', 'simple', 'living']):
            sample_type = 'lifestyle'
        elif any(keyword in url_lower for keyword in ['tech', 'programming', 'code', 'ai', 'chatgpt', 'developer']):
            sample_type = 'tech'
        else:
            # 如果無法判斷，隨機選擇一個
            sample_type = random.choice(list(self.samples.keys()))
        
        return self.samples[sample_type]
    
    def get_sample_by_id(self, task_id: str) -> Dict:
        """根據任務 ID 選擇樣本（支援測試任務中的 test_type）"""
        # 如果 task_id 包含類型資訊
        if '_tech' in task_id:
            return self.samples['tech']
        elif '_news' in task_id:
            return self.samples['news']
        elif '_podcast' in task_id:
            return self.samples['podcast']
        elif '_education' in task_id:
            return self.samples['education']
        elif '_lifestyle' in task_id:
            return self.samples['lifestyle']
        else:
            # 從 ID 的數字部分選擇
            try:
                import re
                numbers = re.findall(r'\d+', task_id)
                if numbers:
                    # 根據數字選擇樣本類型
                    num = int(numbers[-1])
                    types = list(self.samples.keys())
                    selected_type = types[num % len(types)]
                    return self.samples[selected_type]
            except:
                pass
            
            # 預設返回 tech 樣本
            return self.samples['tech']
    
    def get_mock_download_result(self, url: str) -> Tuple[str, Dict]:
        """模擬下載結果，返回檔案路徑和元資料"""
        sample = self.get_sample_by_url(url)
        
        # 生成模擬檔案路徑
        safe_title = "".join(c for c in sample['title'] if c.isalnum() or c in (' ', '-', '_')).rstrip()
        filename = f"mock_audio_{safe_title[:30]}.mp3"
        file_path = f"/tmp/{filename}"
        
        # 模擬元資料
        metadata = {
            'title': sample['title'],
            'description': sample['description'],
            'duration': sample['duration'],
            'url': url,
            'file_path': file_path,
            'file_size': random.randint(10, 50) * 1024 * 1024,  # 10-50MB
            'format': 'mp3',
            'quality': 'best'
        }
        
        return file_path, metadata
    
    def get_mock_transcript(self, audio_path: str, task_id: str = None) -> str:
        """根據音訊檔案路徑或任務 ID 返回模擬轉錄文字"""
        if task_id:
            sample = self.get_sample_by_id(task_id)
        else:
            # 根據檔案名稱中的關鍵字選擇樣本
            filename = audio_path.lower()
            if 'tech' in filename or 'programming' in filename:
                sample = self.samples['tech']
            elif 'news' in filename:
                sample = self.samples['news']
            elif 'podcast' in filename or 'interview' in filename:
                sample = self.samples['podcast']
            elif 'tutorial' in filename or 'lesson' in filename:
                sample = self.samples['education']
            elif 'lifestyle' in filename or 'life' in filename:
                sample = self.samples['lifestyle']
            else:
                sample = self.samples['tech']  # 預設
        
        return sample['transcript']
    
    def get_mock_summary(self, transcript: str, task_id: str = None) -> str:
        """根據轉錄文字或任務 ID 返回模擬摘要"""
        if task_id:
            sample = self.get_sample_by_id(task_id)
        else:
            # 根據轉錄文字的關鍵字選擇樣本
            text_lower = transcript.lower()
            if any(keyword in text_lower for keyword in ['chatgpt', 'ai', '程式', '開發']):
                sample = self.samples['tech']
            elif any(keyword in text_lower for keyword in ['新聞', '產業', '台灣']):
                sample = self.samples['news']
            elif any(keyword in text_lower for keyword in ['創業', '諮商', '心理']):
                sample = self.samples['podcast']
            elif any(keyword in text_lower for keyword in ['python', 'pandas', '教學']):
                sample = self.samples['education']
            elif any(keyword in text_lower for keyword in ['極簡', '生活', '整理']):
                sample = self.samples['lifestyle']
            else:
                sample = self.samples['tech']  # 預設
        
        return sample['summary']
    
    def simulate_error(self, error_rate: float = 0.1) -> bool:
        """模擬錯誤發生（預設 10% 機率）"""
        return random.random() < error_rate
    
    def get_random_error_message(self) -> str:
        """獲取隨機錯誤訊息"""
        error_messages = [
            "模擬網路連線逾時",
            "模擬 API 配額不足",
            "模擬檔案處理失敗",
            "模擬服務暫時不可用",
            "模擬音訊格式不支援"
        ]
        return random.choice(error_messages)
    
    def get_available_types(self) -> list:
        """獲取所有可用的樣本類型"""
        return list(self.samples.keys())
    
    def get_sample_info(self, sample_type: str) -> Dict:
        """獲取特定樣本的基本資訊（不包含完整內容）"""
        if sample_type not in self.samples:
            return {}
        
        sample = self.samples[sample_type]
        return {
            'type': sample_type,
            'title': sample['title'],
            'description': sample['description'],
            'duration': sample['duration'],
            'transcript_length': len(sample['transcript']),
            'summary_length': len(sample['summary'])
        }